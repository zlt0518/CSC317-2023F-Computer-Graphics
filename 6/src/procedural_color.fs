// Set the pixel color to an interesting procedural color generated by mixing
// and filtering Perlin noise of different frequencies.
//
// Uniforms:
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
in vec3 sphere_fs_in;
in vec3 normal_fs_in;
in vec4 pos_fs_in; 
in vec4 view_pos_fs_in; 
// Outputs:
out vec3 color;

// expects: blinn_phong, perlin_noise
//reference p11.5.3 Turbulence
void main()
{
  vec4 light = view * vec4(4 * cos( M_PI * animation_seconds/4), 4, 4 * sin(M_PI * animation_seconds/4), 1);
  vec3 n = normalize(normal_fs_in);
  vec3 v = - normalize(view_pos_fs_in.xyz);
  vec3 l = normalize(light - view_pos_fs_in).xyz;

  //using turbulence function from textbook 
  float omega = 7; 
  float w = 7;
  float k1 = 15; 
  float k2 = 5; 
  float noise1 = sqrt( abs (1 + sin( sphere_fs_in.x + k1 * perlin_noise(k2 * sphere_fs_in) ) / w) );
  float noise2 = (1 + sin(k1 * (sphere_fs_in.x/3 + sphere_fs_in.y/3.2 + sphere_fs_in.z/5) + perlin_noise(k2 * sphere_fs_in)) / omega) / 2;
  
  if(is_moon)
  {
    float p = 1000.0;
    vec3 ka = vec3(0.05,0.05,0.05);
    vec3 ks = vec3(1,1,1);  
    vec3 kd = vec3(0.6, 0.5, 0.45)*noise1*noise2;
    color = blinn_phong(ka, kd, ks, p, n, v, l);
  }
  else
  {
    float p = 1000.0;
    vec3 ka = vec3(0.05,0.05,0.05);
    vec3 ks = vec3(1,1,1);
    vec3 kd = vec3(0.1, 0.2, 0.7)*noise1*noise2;
    color = blinn_phong(ka, kd, ks, p, n, v, l);
  }
}
