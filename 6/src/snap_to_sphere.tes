// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 
void main()
{
  if(is_moon)
  {
    mat4 moon_model = model(is_moon, animation_seconds/4);
    mat4 scale = uniform_scale(0.3);
    mat4 shift = translate(vec3(2,0,0));
    
    pos_fs_in = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]);

    sphere_fs_in = normalize(pos_fs_in.xyz);

    view_pos_fs_in  =  view * moon_model * shift * scale * vec4(sphere_fs_in, 1.0);
    normal_fs_in = (transpose(inverse(view * moon_model)) * vec4(sphere_fs_in, 1.0)).xyz;

    gl_Position = proj * view_pos_fs_in ;
    pos_fs_in = gl_Position;

  }
  else
  {
    pos_fs_in = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]);
    sphere_fs_in = normalize(pos_fs_in.xyz);

    view_pos_fs_in = view * vec4(sphere_fs_in, 1.0);
    normal_fs_in = (transpose(inverse(view)) * vec4(sphere_fs_in, 1.0)).xyz;

    gl_Position = proj * view_pos_fs_in ;
    pos_fs_in = gl_Position;
  }
}
